---
import {
    convertLargeAlpha,
    convertLargeEpsilon,
    convertLargeEta,
    convertLargeIota,
    convertLargeOmicron,
    convertLargeUpsilon,
    convertLargeOmega,
    convertLargeRho,
    convertSmallAlpha,
    convertSmallEpsilon,
    convertSmallEta,
    convertSmallIota,
    convertSmallOmicron,
    convertSmallUpsilon,
    convertSmallOmega,
    convertSmallRho,
} from './converter-lib.js'
---

letters := children=letter*
    .value = string { return this.children.map(l => l.value).join(''); } 

letter :=
      alphabet
    | punctuation
    | anyChar

alphabet :=
      largeAlpha
    | largeEpsilon
    | largeEta
    | largeIota
    | largeOmicron
    | largeUpsilon
    | largeOmega
    | largeBeta
    | largeGamma
    | largeDelta
    | largeZeta
    | largeKappa
    | largeLambda
    | largeMu
    | largeNu
    | largeXi
    | largePi
    | largeRho
    | largeSigma
    | largeTau
    | smallAlpha
    | smallEpsilon
    | smallEta
    | smallIota
    | smallOmicron
    | smallUpsilon
    | smallOmega
    | smallBeta
    | smallGamma
    | smallDelta
    | smallZeta
    | smallKappa
    | smallLambda
    | smallMu
    | smallNu
    | smallXi
    | smallPi
    | smallRho
    | smallSigma
    | smallTau

largeAlpha := text='[<>]?[\'`~]?A\|?'
    .value = string {
        return convertLargeAlpha(this.text);
    }

largeEpsilon := text='[<>]?[\'`]?E'
    .value = string {
        return convertLargeEpsilon(this.text);
    }
   
largeEta := text='[<>]?[\'`~]?\^E\|?'
    .value = string {
        return convertLargeEta(this.text);
    }

largeIota := text='[<>"]?[\'`~]?I'
    .value = string {
        return convertLargeIota(this.text);
    }

largeOmicron := text='[<>]?[\'`]?O'
    .value = string {
        return convertLargeOmicron(this.text);
    }

largeUpsilon := text='[<>"]?[\'`~]?[UY]'
    .value = string {
        return convertLargeUpsilon(this.text);
    }

largeOmega := text='[<>]?[\'`~]?\^O\|?'
    .value = string {
        return convertLargeOmega(this.text);
    }

largeBeta := text='B'
    .value = string {
        return '\u0392';
    }

largeGamma := text='G'
    .value = string {
        return '\u0393';
    }

largeDelta := text='D'
    .value = string {
        return '\u0394';
    }

largeZeta := text='Z'
    .value = string {
        return '\u0396';
    }

largeKappa := text='Kh?'
    .value = string {
        if (this.text.endsWith('h')) {
            return '\u03A7'; // large khi
        } else {
            return '\u039A'; // large kappa
        }
    }

largeLambda := text='L'
    .value = string {
        return '\u039B';
    }

largeMu := text='M'
    .value = string {
        return '\u039C';
    }

largeNu :=
      largeNasableGammaGamma
    | largeNasableGammaKappa
    | largeNasableGammaXi
    | largeSingleNu

largeNasableGammaGamma := 'N' suffix=largeGamma
    .value = string {
        return '\u0393' + this.suffix.value;
    }

largeNasableGammaKappa := 'N' suffix=largeKappa
    .value = string {
        return '\u0393' + this.suffix.value;
    }

largeNasableGammaXi := 'N' suffix=largeXi
    .value = string {
        return '\u0393' + this.suffix.value;
    }

largeSingleNu := text='N'
    .value = string {
        return '\u039D';
    }

largeXi := text='X'
    .value = string {
        return '\u039E';
    }

largePi := text='P[hs]?'
    .value = string {
        if (this.text.endsWith('h')) {
            return '\u03A6'; // large phi
        } else if (this.text.endsWith('s')) {
            return '\u03A8'; // large psi
        } else {
            return '\u03A0'; // large pi
        }
    }

largeRho := text='<?R'
    .value = string {
        return convertLargeRho(this.text);
    }

largeSigma := text='S'
    .value = string {
        return '\u03A3';
    }

largeTau := text='Th?'
    .value = string {
        if (this.text.endsWith('h')) {
            return '\u0398'; // large theta
        } else {
            return '\u03A4'; // large tau
        }
    }

smallAlpha := text='[<>]?[\'`~]?a\|?'
    .value = string {
        return convertSmallAlpha(this.text);
    }

smallEpsilon := text='[<>]?[\'`]?e'
    .value = string {
        return convertSmallEpsilon(this.text);
    }

smallEta := text='[<>]?[\'`~]?\^e\|?'
    .value = string {
        return convertSmallEta(this.text);
    }

smallIota := text='[<>"]?[\'`~]?i'
    .value = string {
        return convertSmallIota(this.text);
    }

smallOmicron := text='[<>]?[\'`]?o'
    .value = string {
        return convertSmallOmicron(this.text);
    }

smallUpsilon := text='[<>"]?[\'`~]?[uy]'
    .value = string {
        return convertSmallUpsilon(this.text);
    }

smallOmega := text='[<>]?[\'`~]?\^o\|?'
    .value = string {
        return convertSmallOmega(this.text);
    }

smallBeta := text='b'
    .value = string {
        return '\u03B2';
    }

smallGamma := text='g'
    .value = string {
        return '\u03B3';
    }

smallDelta := text='d'
    .value = string {
        return '\u03B4';
    }

smallZeta := text='z'
    .value = string {
        return '\u03B6';
    }

smallKappa := text='kh?'
    .value = string {
        if (this.text.endsWith("h")) {
            return '\u03C7'; // small khi
        } else {
            return '\u03BA'; // small kappa
        }
    }

smallLambda := text='l'
    .value = string {
        return '\u03BB';
    }

smallMu := text='m'
    .value = string {
        return '\u03BC';
    }

smallNu :=
      smallNasableGammaGamma
    | smallNasableGammaKappa
    | smallNasableGammaXi
    | smallSingleNu

smallNasableGammaGamma := 'n' suffix=smallGamma
    .value = string {
        return '\u03B3' + this.suffix.value;
    }

smallNasableGammaKappa := 'n' suffix=smallKappa
    .value = string {
        return '\u03B3' + this.suffix.value;
    }

smallNasableGammaXi := 'n' suffix=smallXi
    .value = string {
        return '\u03B3' + this.suffix.value;
    }

smallSingleNu := text='n'
    .value = string {
        return '\u03BD';
    }

smallXi := text='x'
    .value = string {
        return '\u03BE';
    }

smallPi := text='p[hs]?'
    .value = string {
        if (this.text.includes("h")) {
            return '\u03C6'; // small phi
        } else if (this.text.includes("s")) {
            return '\u03C8'; // small psi
        } else {
            return '\u03C0'; // small pi
        }
    }

smallRho := text='[<>]?r'
    .value = string {
        return convertSmallRho(this.text);
    }

smallSigma :=
      smallNonFinalSigma
    | smallSingleSigma

smallNonFinalSigma := 's' child=alphabet
    .value = string {
        return '\u03C3' + this.child.value;
    }

smallSingleSigma := text='[cs]'
    .value = string {
        if (text == "s") {
            return '\u03C2'; // final sigma
        } else {
            return '\u03C3'; // non-final sigma
        }
    }

smallTau := text='th?'
    .value = string {
        if (this.text.includes("h")) {
            return '\u03B8'; // small theta
        } else {
            return '\u03C4'; // small tau
        }
    }

punctuation :=
      semicoron
    | question

semicoron := text=';'
    .value = string {
        return '\u0387';
    }

question := text='\?'
    .value = string {
        return '\u037E';
    }

anyChar := text='.'
    .value = string {
        return text;
    }
